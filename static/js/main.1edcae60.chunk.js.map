{"version":3,"sources":["components/square.js","components/board.js","components/form.js","components/game.js","registerServiceWorker.js","index.js"],"names":["Square","props","toggleClass","bind","state","animate","this","setState","console","log","className","onClick","value","React","Component","Board","i","squares","renderSquare","Form","playerOne","playerTwo","displayForm","handlePlayerOne","handlePlayerTwo","event","target","hidden","type","onChange","name","getPlayerName","Game","history","Array","fill","xIsNext","lines","length","a","b","c","slice","calculateWinner","concat","status","current","winner","handleClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","rootElement","document","getElementById","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1edcae60.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Square extends React.Component {\r\nconstructor(props){\r\n  super(props);\r\n  this.toggleClass = this.toggleClass.bind(this);\r\n  this.state = {\r\n    animate : '',\r\n  }\r\n}\r\n  toggleClass() {\r\n    const animate = this.state.animate;\r\n    this.setState({ animate: 'animated bounce' });\r\n    console.log('ss')\r\n};\r\n\r\n    render() {\r\n      return (\r\n        <button\r\n          className=\"square animated flipInX\"\r\n          onClick={() => this.props.onClick()}\r\n        >\r\n          <span className={this.state.animate} onClick={() => this.toggleClass()}> {this.props.value}</span>\r\n        </button>\r\n      );\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport { Square } from './square';\r\nexport \r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport class Form extends React.Component {\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {\r\n    playerOne: '', \r\n    playerTwo: '', \r\n    displayForm: true,\r\n};\r\n   \r\n    this.handlePlayerOne = this.handlePlayerOne.bind(this);\r\n    this.handlePlayerTwo = this.handlePlayerTwo.bind(this);\r\n}\r\n\r\n\r\n\r\nhandlePlayerOne(event){\r\n    const target = event.target;\r\n    const playerOne = target.value;\r\n    this.setState({\r\n        playerOne: playerOne, \r\n    });\r\n}\r\n\r\n\r\nhandlePlayerTwo(event){\r\n    const target = event.target;\r\n    const playerTwo = target.value;\r\n    this.setState({\r\n        playerTwo: playerTwo, \r\n    });\r\n}\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div> \r\n            <form hidden={this.displayForm}>\r\n            <label className=\"control-label\">\r\n              Player 1:\r\n              <input type=\"text\" className=\"form-control\" value={this.state.playerOne} onChange={this.handlePlayerOne} name=\"playerOne\" />\r\n            </label>\r\n            <label>\r\n              Player 2:\r\n              <input type=\"text\" className=\"form-control\" value={this.state.playerTwo} onChange={this.handlePlayerTwo} name=\"PlayerTwo\" />\r\n            </label>\r\n            <input type=\"button\" className=\"btn btn-primary\" onClick={this.props.getPlayerName}  value=\"Start\" />\r\n          </form>\r\n\r\n         <h3>Player One: {this.state.playerOne}</h3>\r\n         <h3>Player Two: {this.state.playerTwo}</h3></div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Board } from './board';\r\nimport { Form } from './form';\r\nexport class Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null)\r\n      }],\r\n      xIsNext: true,\r\n      playerOne: 'Player One',\r\n      playerTwo: 'Player Two'\r\n    };\r\n  }\r\n\r\n\r\n\r\n  calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  handleClick(i) {\r\n    const history = this.state.history;\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (this.calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares\r\n      }]),\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  \r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[history.length - 1];\r\n    const winner = this.calculateWinner(current.squares);\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner ;\r\n    } else {\r\n      status =  (this.state.xIsNext ? this.state.playerOne : this.state.playerTwo);\r\n    }\r\n\r\n    return (\r\n      <div className=\"contianer\">\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-md-12 text-center\">\r\n          <div className=\"game-info\">\r\n              <h3>{status}</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <Form  />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n           \r\n            <div className=\"game\">\r\n              <div className=\"game-board\">\r\n\r\n                <Board\r\n                  squares={current.squares}\r\n                  onClick={(i) => this.handleClick(i)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Game} from './components/game';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}